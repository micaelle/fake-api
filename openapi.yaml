openapi: 3.0.0
info:
  version: 1.0.0
  title: Billy/Orders REST API
  description: This API is used for access to Orders subsystem
  contact:
    name: Michael Fedchenko
servers:
  - url: 'http://api-billy.testkontur.ru'
    description: staging
  - url: 'https://billy-publicapi.kontur.ru'
    description: production
paths:
  /tweets:
    post:
      tags:
        - tweet
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tweet'
      responses:
        '200':
          description: Get Tweet
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tweet'
              example:
                id: abc-f45def-5sdaf-5636f
                text: 'Merry Christmast Everyone!!!'
                createdTime: '2018-12-24T09:21:41.827Z'
      description: some descr
      operationId: addTweet
    get:
      tags:
        - tweet
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
        - name: cursor
          in: query
          schema:
            type: string
      responses:
        '200':
          description: List Tweet Item
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tweet'
              example:
                - id: abc-f45def-5sdaf-5636f
                  text: 'Merry Christmast Everyone!!!'
                  createdTime: '2018-12-24T09:21:41.827Z'
                - id: abc-f45def-5sdaf-5636f
                  text: I believe santa will give me a great present
                  createdTime: '2018-12-23T09:21:41.827Z'
                - id: abc-f45def-5sdaf-5636f
                  text: 'Hello my secret santa. Thank you!!!'
                  createdTime: '2018-12-22T09:21:41.827Z'
      description: some descr
      operationId: getTweets
  '/tweets/{id}':
    get:
      tags:
        - tweet
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Get Tweet
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tweet'
              example:
                id: abc-f45def-5sdaf-5636f
                text: 'Merry Christmast Everyone!!!'
                createdTime: '2018-12-24T09:21:41.827Z'
        '404':
          description: "Tweet doesn't exists"
      description: some descr
      operationId: getTweet
    delete:
      tags:
        - tweet
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Tweet deleted successfully
        '404':
          description: "Tweet doesn't exists"
      description: some descr
      operationId: deleteTweet
  /orders/products/info:
    get:
      summary: product list
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ./models/productinfo.v1.yaml
              examples:
                example-1:
                  value:
                    - ProductId: AlcoReport
                      ProductName: Контур.Алко
                    - ProductId: AlcoRevise
                      ProductName: Контур.Алкосверка
                    - ProductId: Bank
                      ProductName: Контур.Банк
      operationId: GetProducts
      description: just some description of orders/products/info
    parameters: []
  '/orders/services/{productId}/info':
    parameters:
      - type: string
        name: productId
        in: path
        required: true
        schema:
          type: string
        description: ProductId
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceDescription'
              examples:
                example-1:
                  value:
                    - ProductId: Edi
                      NamedId: km_mercurypoints
                      Name: Торговые точки (Меркурий Маркет)
                    - ProductId: Edi
                      NamedId: api
                      Name: Доступ к API
      description: ''
      operationId: getServices
      requestBody: {}
components:
  schemas:
    Tweet:
      required:
        - name
      properties:
        id:
          description: generated from DB. Not required
          type: string
          example: abc-f45def-5sdaf-5636f
          readOnly: true
        text:
          type: string
          example: Merry Christmast
        createdTime:
          type: string
          format: date-time
          readOnly: true
      x-tags:
        - orders
    ProductId:
      $ref: ./models/productid.v1.yaml
      x-examples:
        example-1: {}
    ServiceDescription:
      title: ServiceDescription
      type: object
      x-tags:
        - orders
      properties:
        ProductId:
          $ref: ./models/productid.v1.yaml
        NameId:
          type: string
          description: Идентификатор продукта
        Name:
          type: string
          description: Идентификатор сервиса
        '':
          type: string
          description: Человекочитаемое имя сервиса
      required:
        - ProductId
        - NameId
        - Name
        - ''
  securitySchemes:
    API Key - 1:
      name: API Key
      type: apiKey
      in: query
